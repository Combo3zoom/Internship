from random import randint


class Node:

    def __init__(self, value=None, next=None, previous=None):
        self.value = value
        self.next = next
        self.previous = previous


class LinkedList:
    head: Node = None
    end: Node = None
    count = 0

    def __init__(self, value=None):
        if value is None:
            return
        self.add(value)

    def add(self, value):
        # validation for value
        if self.head is None:
            self.IfListNone(value)
            return
        self.end.next = Node(value, None, self.end)
        self.end = self.end.next
        self.count += 1
        return

    def randomAdd(self, upperLimit, lowerLimit, count=1):
        # validation for upperLimit and lowerLimit
        value = randint(upperLimit, lowerLimit)
        if self.head is None:
            self.IfListNone(value)
            return
        self.end.next = Node(value, None, self.end)
        self.end = self.end.next
        self.count += 1
        return

    def insert(self, value, index = 0):
        # validation for index and value
        if self.count == 0:
            self.add(value)
            return

        if index < 0 or index > self.count:
            raise IndexError("incorrect index")

        if index == self.count:
            self.add(value)
            return

        if index == 0:
            if self.head is None:
                self.IfListNone(value)
                return
            self.head.previous = Node(value, self.head, None)
            self.head = self.head.previous
            self.count += 1
            return

        node = self.getNode(index)
        left = node.previous
        right = node

        a = Node(value, right, left)
        left.next = a
        right.previous = a

        self.count += 1
        return

    def IfListNone(self, value):
        self.head = self.end = Node(value)
        self.count += 1
        return

    def getNode(self, index):
        if index < 0 or index >= self.count:
            raise IndexError
        OurNode = self.head
        for i in range(self.count):
            if i == index:
                return OurNode
            OurNode = OurNode.next

    def printList(self):
        arr = []
        OurNode = self.head
        while (OurNode != None):
            arr.append(OurNode.value)
            OurNode = OurNode.next
        print(arr)
        return

    def deleteNode(self, index):
        if index < 0 or index >= self.count:
            raise IndexError

        if self.head is None:
            return

        OurNode = self.getNode(index)

        if index == 0:
            self.head = self.head.next
            self.head.previous = None
            if self.count == 0:
                self.head = self.end
            self.count -= 1
            return

        if index == self.count - 1:
            self.end = self.end.previous
            self.end.next = None
            if self.count == 0:
                self.head = self.end
            self.count -= 1
            return

        left = OurNode.previous
        right = OurNode.next
        left.next = right
        right.previous = left
        self.count -= 1
        return

    def DeleteReplaceNumbers(self, value):
        if self.head is None:
            return

        OurNode = self.head
        i = 0
        while (OurNode is not None):
            if (OurNode.value == value):
                self.deleteNode(i)
                OurNode = self.head
                i = 0
            i += 1
            OurNode = OurNode.next
        return
